generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @unique @default(autoincrement())
  uuid                   String                  @unique @default(cuid())
  email                  String                  @unique
  phone                  String                  @unique
  optin                  Boolean                 @default(true) @map("optin")
  name                   String
  slug                   String                  @unique
  indicatedBy            String?
  password               String?
  isActive               Boolean                 @default(false) @map("is_active")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @default(now()) @map("updated_at")
  deletedAt              DateTime?               @map("deleted_at")
  isEmailConfirmed       Boolean                 @default(false) @map("is_email_confirmed")
  isPhoneConfirmed       Boolean                 @default(false) @map("is_phone_confirmed")
  mainPortfolio          String?
  customerMP             String?
  creditTransaction      CreditTransaction[]     @relation("UserCreditTransaction")
  paidArticleUser        UserArticlePaid[]       @relation("paidArticleUser")
  createdArticleComments ArticleComments[]       @relation("createdArticlesComments")
  createdArticleLike     ArticleLike[]           @relation("createdArticlesLike")
  createdArticleView     ArticleView[]           @relation("createdArticlesView")
  createdArticles        Articles[]              @relation("CreatedArticles")
  deletedArticles        Articles[]              @relation("DeletedArticles")
  updatedArticles        Articles[]              @relation("UpdatedArticles")
  candidate              Candidate?
  credits                Credits[]               @relation("UserCredits")
  freelancer             Freelancer?
  createdJobApplication  JobApplication[]        @relation("CreatedJobApplication")
  createdJob             Jobs[]                  @relation("CreatedJob")
  deletedJob             Jobs[]                  @relation("DeletedJob")
  updatedJob             Jobs[]                  @relation("UpdatedJob")
  messageApprovalSystem  MessageApprovalSystem[] @relation("UserApprovalSystem")
  recruiter              Recruiter?
  ResetPasswordToken     ResetPasswordToken[]
  serviceProvider        ServiceProvider?
  usage                  Usage[]                 @relation("UserUsage")

  @@map("users")
}

model MessageApprovalSystem {
  id        Int         @id @default(autoincrement())
  message   String
  type      String
  explain   String?
  userId    Int
  idMessage Int?
  approved  AprovalType @default(WAITING)
  finished  Boolean     @default(false)
  status    Boolean[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  user      User        @relation("UserApprovalSystem", fields: [userId], references: [id], onDelete: Cascade)

  @@map("messageApprovalSystem")
}

model Packs {
  id          Int      @id @default(autoincrement())
  type        String   @unique
  name        String
  features    String[]
  phrases     String
  credits     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  unit_amount Int
  isActive    Boolean  @default(true) @map("is_active")

  @@map("packs")
}

model CostsUsage {
  id        Int      @id @default(autoincrement())
  type      String   @unique
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("costsusage")
}

model Credits {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  amount             Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  status             String              @default("pending")
  creditTransactions CreditTransaction[]
  user               User                @relation("UserCredits", fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Usage {
  id        Int      @id @default(autoincrement())
  userId    Int
  total     Int
  input     Int
  output    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserUsage", fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage")
}

model CreditTransaction {
  id                Int      @id @default(autoincrement())
  creditId          Int?
  amount            Int
  createdAt         DateTime @default(now())
  transactionType   String?
  status            String   @default("pending")
  userId            Int
  mp_id_transaction BigInt   @default(0)
  type              String?
  credit            Credits? @relation(fields: [creditId], references: [id], onDelete: Cascade)
  user              User     @relation("UserCreditTransaction", fields: [userId], references: [id], onDelete: Cascade)

  @@map("CreditTransaction")
}

model Category {
  id              Int                           @id @default(autoincrement())
  uuid            String                        @default(cuid())
  name            String
  createdAt       DateTime                      @default(now()) @map("created_at")
  updatedAt       DateTime                      @default(now()) @map("updated_at")
  deletedAt       DateTime?                     @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  type            ProfileType
  article         CategoriesOnArticles[]
  candidate       CategoriesOnCandidate[]
  freelancer      CategoriesOnFreelancer[]
  jobs            CategoriesOnJobs[]
  recruiter       CategoriesOnRecruiter[]
  serviceProvider CategoriesOnServiceProvider[]

  @@map("category")
}

model CategoriesOnArticles {
  articleId  Int
  categoryId Int
  assignedAt DateTime @default(now())
  article    Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}

model CategoriesOnCandidate {
  candidateId Int
  categoryId  Int
  assignedAt  DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([candidateId, categoryId])
}

model CategoriesOnJobs {
  jobsId     Int
  categoryId Int
  assignedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  jobs       Jobs     @relation(fields: [jobsId], references: [id], onDelete: Cascade)

  @@id([jobsId, categoryId])
}

model CategoriesOnRecruiter {
  recruiterId Int
  categoryId  Int
  assignedAt  DateTime  @default(now())
  category    Category  @relation(fields: [categoryId], references: [id])
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@id([recruiterId, categoryId])
}

model CategoriesOnServiceProvider {
  serviceProviderId Int
  categoryId        Int
  assignedAt        DateTime        @default(now())
  category          Category        @relation(fields: [categoryId], references: [id])
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@id([serviceProviderId, categoryId])
}

model CategoriesOnFreelancer {
  freelancerId Int
  categoryId   Int
  assignedAt   DateTime   @default(now())
  category     Category   @relation(fields: [categoryId], references: [id])
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@id([freelancerId, categoryId])
}

model Tags {
  id              Int                     @id @default(autoincrement())
  uuid            String                  @default(cuid())
  type            ProfileType
  name            String
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @default(now()) @map("updated_at")
  deletedAt       DateTime?               @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  article         TagsOnArticles[]
  candidate       TagsOnCandidate[]
  freelancer      TagsOnFreelancer[]
  jobs            TagsOnJobs[]
  recruiter       TagsOnRecruiter[]
  serviceProvider TagsOnServiceProvider[]

  @@map("tags")
}

model TagsOnArticles {
  articleId  Int
  tagsId     Int
  assignedAt DateTime @default(now())
  article    Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tags       Tags     @relation(fields: [tagsId], references: [id])

  @@id([articleId, tagsId])
}

model TagsOnCandidate {
  candidateId Int
  tagsId      Int
  assignedAt  DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  tags        Tags      @relation(fields: [tagsId], references: [id])

  @@id([candidateId, tagsId])
}

model TagsOnJobs {
  jobsId     Int
  tagsId     Int
  assignedAt DateTime @default(now())
  jobs       Jobs     @relation(fields: [jobsId], references: [id], onDelete: Cascade)
  tags       Tags     @relation(fields: [tagsId], references: [id])

  @@id([jobsId, tagsId])
}

model TagsOnServiceProvider {
  serviceProviderId Int
  tagsId            Int
  assignedAt        DateTime        @default(now())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  tags              Tags            @relation(fields: [tagsId], references: [id])

  @@id([serviceProviderId, tagsId])
}

model TagsOnFreelancer {
  freelancerId Int
  tagsId       Int
  assignedAt   DateTime   @default(now())
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  tags         Tags       @relation(fields: [tagsId], references: [id])

  @@id([freelancerId, tagsId])
}

model TagsOnRecruiter {
  recruiterId Int
  tagsId      Int
  assignedAt  DateTime  @default(now())
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  tags        Tags      @relation(fields: [tagsId], references: [id])

  @@id([recruiterId, tagsId])
}

model Areas {
  id              Int                      @id @default(autoincrement())
  uuid            String                   @default(cuid())
  type            ProfileType
  name            String
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @default(now()) @map("updated_at")
  deletedAt       DateTime?                @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  candidate       AreasOnCandidate[]
  freelancer      AreasOnFreelancer[]
  jobs            AreasOnJobs[]
  recruiter       AreasOnRecruiter[]
  serviceProvider AreasOnServiceProvider[]

  @@map("areas")
}

model AreasOnCandidate {
  candidateId Int
  areasId     Int
  assignedAt  DateTime  @default(now())
  areas       Areas     @relation(fields: [areasId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@id([candidateId, areasId])
}

model AreasOnJobs {
  jobsId     Int
  areasId    Int
  assignedAt DateTime @default(now())
  areas      Areas    @relation(fields: [areasId], references: [id], onDelete: Cascade)
  jobs       Jobs     @relation(fields: [jobsId], references: [id], onDelete: Cascade)

  @@id([jobsId, areasId])
}

model AreasOnServiceProvider {
  serviceProviderId Int
  areasId           Int
  assignedAt        DateTime        @default(now())
  areas             Areas           @relation(fields: [areasId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@id([serviceProviderId, areasId])
}

model AreasOnFreelancer {
  freelancerId Int
  areasId      Int
  assignedAt   DateTime   @default(now())
  areas        Areas      @relation(fields: [areasId], references: [id], onDelete: Cascade)
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@id([freelancerId, areasId])
}

model AreasOnRecruiter {
  recruiterId Int
  areasId     Int
  assignedAt  DateTime  @default(now())
  areas       Areas     @relation(fields: [areasId], references: [id], onDelete: Cascade)
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@id([recruiterId, areasId])
}

model Candidate {
  id           Int                     @id @default(autoincrement())
  uuid         String                  @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @default(now()) @map("updated_at")
  deletedAt    DateTime?               @map("deleted_at")
  travel       String[]
  userId       Int                     @unique
  extra        String?
  avatar       String?
  banner       String?
  affirmative  String[]
  areas        AreasOnCandidate[]
  categories   CategoriesOnCandidate[]
  tags         TagsOnCandidate[]
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("candidates")
}

model JobApplication {
  id                Int      @id @default(autoincrement())
  name              String
  email             String?
  phone             String?
  description       String?
  terms             Boolean? @default(true)
  feedback          String?
  feedbackrecruiter String?
  evaluation        String?
  favorite          Boolean                 @default(false) @map("favorite")
  score             Float?
  createdAt         DateTime @default(now()) @map("created_at")
  createdBy         Int?     @map("created_by")
  jobId             Int
  createdById       User?    @relation("CreatedJobApplication", fields: [createdBy], references: [id], onDelete: Cascade)
  job               Jobs     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("jobapplication")
}

model Jobs {
  id                 Int                @id @default(autoincrement())
  title              String
  company            String?
  email              String?
  phone              String?
  description        String?
  slug               String             @unique
  isPublished        Boolean            @default(false) @map("is_published")
  isApproved         Boolean            @default(false) @map("is_approved")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @map("updated_at")
  deletedAt          DateTime?          @map("deleted_at")
  createdBy          Int?               @map("created_by")
  updatedBy          Int?               @map("updated_by")
  deletedBy          Int?               @map("deleted_by")
  descriptionCompany String?
  salary             String[]
  city               String?
  state              String?
  isActive           Boolean            @default(true)
  extra              String?
  avatar             String?
  banner             String?
  experience         String?
  affirmative        String[]
  showSalary         Boolean            @default(true)
  contractMode       String[]
  seniority          String[]
  travel             String[]
  modelOfWork        String[]
  areas              AreasOnJobs[]
  categories         CategoriesOnJobs[]
  tags               TagsOnJobs[]
  jobApplication     JobApplication[]
  createdById        User?              @relation("CreatedJob", fields: [createdBy], references: [id], onDelete: Cascade)
  deletedById        User?              @relation("DeletedJob", fields: [deletedBy], references: [id], onDelete: Cascade)
  updatedById        User?              @relation("UpdatedJob", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Token {
  email     String
  phone     String
  token     String   @unique
  toLogin   Boolean  @default(false)
  id        Int      @id @default(autoincrement())
  uuid      String   @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  page      String?

  @@map("token")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_password_tokens")
}

model Manage_sessions {
  id         Int       @id @default(autoincrement())
  session_id String
  key        String
  value      String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("manage_sessions")
}

model Recruiter {
  id           Int                     @id @default(autoincrement())
  uuid         String                  @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @default(now()) @map("updated_at")
  deletedAt    DateTime?               @map("deleted_at")
  userId       Int                     @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnRecruiter[]
  categories   CategoriesOnRecruiter[]
  tags         TagsOnRecruiter[]
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recruiters")
}

model ServiceProvider {
  id           Int                           @id @default(autoincrement())
  uuid         String                        @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                      @default(now()) @map("created_at")
  updatedAt    DateTime                      @default(now()) @map("updated_at")
  deletedAt    DateTime?                     @map("deleted_at")
  userId       Int                           @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnServiceProvider[]
  categories   CategoriesOnServiceProvider[]
  tags         TagsOnServiceProvider[]
  user         User                          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("serviceproviders")
}

model Freelancer {
  id           Int                      @id @default(autoincrement())
  uuid         String                   @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @default(now()) @map("updated_at")
  deletedAt    DateTime?                @map("deleted_at")
  userId       Int                      @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnFreelancer[]
  categories   CategoriesOnFreelancer[]
  tags         TagsOnFreelancer[]
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelancers")
}

model Articles {
  id              Int                    @id @default(autoincrement())
  slug            String                 @unique
  title           String
  text            Json
  isPublished     Boolean                @default(false) @map("is_published")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @default(now()) @map("updated_at")
  deletedAt       DateTime?              @map("deleted_at")
  createdBy       Int?                   @map("created_by")
  updatedBy       Int?                   @map("updated_by")
  deletedBy       Int?                   @map("deleted_by")
  uuid            String                 @unique @default(cuid())
  viewsCount      BigInt                 @default(0) @map("views_count")
  paid            Boolean                @default(false)
  price           Int                    @default(0)
  categories      CategoriesOnArticles[]  
  tags            TagsOnArticles[]  
  userArticlePaid UserArticlePaid[]      @relation("UserArticlePaid") 
  articleComments ArticleComments[]      @relation("ArticleComments") 
  articleHistory  ArticleHistory[]       @relation("ArticleHistory") 
  articleLike     ArticleLike[]          @relation("ArticleLike") 
  articleView     ArticleView[]          @relation("ArticleView") 
  createdById     User?                  @relation("CreatedArticles", fields: [createdBy], references: [id], onDelete: Cascade)
  deletedById     User?                  @relation("DeletedArticles", fields: [deletedBy], references: [id], onDelete: Cascade)
  updatedById     User?                  @relation("UpdatedArticles", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@map("articles")
}

model ArticleHistory {
  id        Int       @id @default(autoincrement())
  slug      String
  title     String
  text      Json
  articleId Int?      @map("article_id")
  createdAt DateTime  @default(now()) @map("created_at")
  uuid      String    @unique @default(cuid())
  article   Articles? @relation("ArticleHistory", fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_history")
}

model UserArticlePaid {
  id          Int      @id @default(autoincrement())
  paidAt      DateTime @default(now())
  articleId   Int      @map("article_id")
  createdBy   Int?     @map("created_by")
  article     Articles @relation("UserArticlePaid", fields: [articleId], references: [id], onDelete: Cascade)
  createdById User?    @relation("paidArticleUser", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([articleId, createdBy])
  @@map("user_article_paid")
}

model ArticleView {
  id          Int      @id @default(autoincrement())
  viewedAt    DateTime @default(now())
  articleId   Int      @map("article_id")
  createdBy   Int?     @map("created_by")
  article     Articles @relation("ArticleView", fields: [articleId], references: [id], onDelete: Cascade)
  createdById User?    @relation("createdArticlesView", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([articleId, createdBy])
  @@map("article_view")
}

model ArticleLike {
  id          Int      @id @default(autoincrement())
  type        Int      @default(0)
  viewedAt    DateTime @default(now())
  articleId   Int      @map("article_id")
  createdBy   Int?     @map("created_by")
  article     Articles @relation("ArticleLike", fields: [articleId], references: [id], onDelete: Cascade)
  createdById User?    @relation("createdArticlesLike", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([articleId, createdBy])
  @@map("article_like")
}

model ArticleComments {
  id          Int      @id @default(autoincrement())
  comment     String
  createdAt   DateTime @default(now())
  articleId   Int      @map("article_id")
  createdBy   Int?     @map("created_by")
  article     Articles @relation("ArticleComments", fields: [articleId], references: [id], onDelete: Cascade)
  createdById User?    @relation("createdArticlesComments", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([articleId, createdBy])
  @@map("article_comments")
}

enum AprovalType {
  WAITING
  APPROVED
  DISAPPROVED
}

enum ProfileType {
  CANDIDATE
  RECRUITER
  JOB
  SERVICE_PROVIDER
  FREELANCER
  ARTICLE
}
