generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                         Int                  @id @unique @default(autoincrement())
  uuid                                       String               @unique @default(cuid())
  stripe_id                                  String?
  email                                      String               @unique
  phone                                      String               @unique
  optin                                      Boolean              @default(true) @map("optin")
  name                                       String
  slug                                       String               @unique
  indicatedBy                                String?
  password                                   String?
  isActive                                   Boolean              @default(true) @map("is_active")
  createdAt                                  DateTime             @default(now()) @map("created_at")
  updatedAt                                  DateTime             @default(now()) @map("updated_at")
  deletedAt                                  DateTime?            @map("deleted_at")
  isEmailConfirmed                           Boolean              @default(false) @map("is_email_confirmed")
  isPhoneConfirmed                           Boolean              @default(false) @map("is_phone_confirmed")
  is_candidate                               Boolean              @default(false)
  is_freelancer                              Boolean              @default(false)
  is_recruiter                               Boolean              @default(false)
  is_service_provider                        Boolean              @default(false)
  mainPortfolio                              String?
  customerMP                                 String?
  creditTransaction                          CreditTransaction[]  @relation("UserCreditTransaction")
  candidate                                  Candidate?
  credits                                    Credits[]            @relation("UserCredits")
  freelancer                                 Freelancer?
  createdJob                                 Jobs[]               @relation("CreatedJob")
  deletedJob                                 Jobs[]               @relation("DeletedJob")
  updatedJob                                 Jobs[]               @relation("UpdatedJob")
  recruiter                                  Recruiter?
  ResetPasswordToken                         ResetPasswordToken[]
  serviceProvider                            ServiceProvider?
  subscription_subscription_createdByTousers subscription[]       @relation("subscription_createdByTousers")
  subscription_subscription_deletedByTousers subscription[]       @relation("subscription_deletedByTousers")
  subscription_subscription_updatedByTousers subscription[]       @relation("subscription_updatedByTousers")
  usage                                      Usage[]              @relation("UserUsage")

  @@map("users")
}

model Packs {
  id          Int      @id @default(autoincrement())
  type        String
  name        String
  features    String[]
  phrases     String
  credits     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  unit_amount Float
  isActive    Boolean  @default(true) @map("is_active")

  @@map("packs")
}

model CostsUsage {
  id        Int      @id @default(autoincrement())
  type      String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("costsusage")
}

model Credits {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  amount             Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  status             String              @default("pending")
  creditTransactions CreditTransaction[]
  user               User                @relation("UserCredits", fields: [userId], references: [id])

  @@map("credits")
}

model Usage {
  id        Int      @id @default(autoincrement())
  userId    Int
  total     Int
  input     Int
  output    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserUsage", fields: [userId], references: [id])

  @@map("usage")
}

model CreditTransaction {
  id                Int      @id @default(autoincrement())
  creditId          Int?
  amount            Int
  createdAt         DateTime @default(now())
  transactionType   String
  status            String   @default("pending")
  userId            Int
  mp_id_transaction BigInt   @default(0)
  credit            Credits? @relation(fields: [creditId], references: [id])
  user              User     @relation("UserCreditTransaction", fields: [userId], references: [id])

  @@map("CreditTransaction")
}

model Category {
  id              Int                           @id @default(autoincrement())
  uuid            String                        @default(cuid())
  name            String
  createdAt       DateTime                      @default(now()) @map("created_at")
  updatedAt       DateTime                      @default(now()) @map("updated_at")
  deletedAt       DateTime?                     @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  type            ProfileType
  candidate       CategoriesOnCandidate[]
  freelancer      CategoriesOnFreelancer[]
  jobs            CategoriesOnJobs[]
  recruiter       CategoriesOnRecruiter[]
  serviceProvider CategoriesOnServiceProvider[]

  @@map("category")
}

model CategoriesOnCandidate {
  candidateId Int
  categoryId  Int
  assignedAt  DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([candidateId, categoryId])
}

model CategoriesOnJobs {
  jobsId     Int
  categoryId Int
  assignedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  jobs       Jobs     @relation(fields: [jobsId], references: [id])

  @@id([jobsId, categoryId])
}

model CategoriesOnRecruiter {
  recruiterId Int
  categoryId  Int
  assignedAt  DateTime  @default(now())
  category    Category  @relation(fields: [categoryId], references: [id])
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])

  @@id([recruiterId, categoryId])
}

model CategoriesOnServiceProvider {
  serviceProviderId Int
  categoryId        Int
  assignedAt        DateTime        @default(now())
  category          Category        @relation(fields: [categoryId], references: [id])
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  @@id([serviceProviderId, categoryId])
}

model CategoriesOnFreelancer {
  freelancerId Int
  categoryId   Int
  assignedAt   DateTime   @default(now())
  category     Category   @relation(fields: [categoryId], references: [id])
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])

  @@id([freelancerId, categoryId])
}

model Tags {
  id              Int                     @id @default(autoincrement())
  uuid            String                  @default(cuid())
  type            ProfileType
  name            String
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @default(now()) @map("updated_at")
  deletedAt       DateTime?               @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  candidate       TagsOnCandidate[]
  freelancer      TagsOnFreelancer[]
  jobs            TagsOnJobs[]
  recruiter       TagsOnRecruiter[]
  serviceProvider TagsOnServiceProvider[]

  @@map("tags")
}

model TagsOnCandidate {
  candidateId Int
  tagsId      Int
  assignedAt  DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  tags        Tags      @relation(fields: [tagsId], references: [id])

  @@id([candidateId, tagsId])
}

model TagsOnJobs {
  jobsId     Int
  tagsId     Int
  assignedAt DateTime @default(now())
  jobs       Jobs     @relation(fields: [jobsId], references: [id])
  tags       Tags     @relation(fields: [tagsId], references: [id])

  @@id([jobsId, tagsId])
}

model TagsOnServiceProvider {
  serviceProviderId Int
  tagsId            Int
  assignedAt        DateTime        @default(now())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  tags              Tags            @relation(fields: [tagsId], references: [id])

  @@id([serviceProviderId, tagsId])
}

model TagsOnFreelancer {
  freelancerId Int
  tagsId       Int
  assignedAt   DateTime   @default(now())
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  tags         Tags       @relation(fields: [tagsId], references: [id])

  @@id([freelancerId, tagsId])
}

model TagsOnRecruiter {
  recruiterId Int
  tagsId      Int
  assignedAt  DateTime  @default(now())
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])
  tags        Tags      @relation(fields: [tagsId], references: [id])

  @@id([recruiterId, tagsId])
}

model Areas {
  id              Int                      @id @default(autoincrement())
  uuid            String                   @default(cuid())
  type            ProfileType
  name            String
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @default(now()) @map("updated_at")
  deletedAt       DateTime?                @map("deleted_at")
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  candidate       AreasOnCandidate[]
  freelancer      AreasOnFreelancer[]
  jobs            AreasOnJobs[]
  recruiter       AreasOnRecruiter[]
  serviceProvider AreasOnServiceProvider[]

  @@map("areas")
}

model AreasOnCandidate {
  candidateId Int
  areasId     Int
  assignedAt  DateTime  @default(now())
  areas       Areas     @relation(fields: [areasId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@id([candidateId, areasId])
}

model AreasOnJobs {
  jobsId     Int
  areasId    Int
  assignedAt DateTime @default(now())
  areas      Areas    @relation(fields: [areasId], references: [id])
  jobs       Jobs     @relation(fields: [jobsId], references: [id])

  @@id([jobsId, areasId])
}

model AreasOnServiceProvider {
  serviceProviderId Int
  areasId           Int
  assignedAt        DateTime        @default(now())
  areas             Areas           @relation(fields: [areasId], references: [id])
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  @@id([serviceProviderId, areasId])
}

model AreasOnFreelancer {
  freelancerId Int
  areasId      Int
  assignedAt   DateTime   @default(now())
  areas        Areas      @relation(fields: [areasId], references: [id])
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])

  @@id([freelancerId, areasId])
}

model AreasOnRecruiter {
  recruiterId Int
  areasId     Int
  assignedAt  DateTime  @default(now())
  areas       Areas     @relation(fields: [areasId], references: [id])
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])

  @@id([recruiterId, areasId])
}

model Candidate {
  id           Int                     @id @default(autoincrement())
  uuid         String                  @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @default(now()) @map("updated_at")
  deletedAt    DateTime?               @map("deleted_at")
  travel       String[]
  userId       Int                     @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnCandidate[]
  categories   CategoriesOnCandidate[]
  tags         TagsOnCandidate[]
  user         User                    @relation(fields: [userId], references: [id])

  @@map("candidates")
}

model Jobs {
  id                     Int                @id @default(autoincrement())
  title                  String
  company                String?
  email                  String?
  phone                  String?
  description            String?
  slug                   String             @unique
  isPublished            Boolean            @default(false) @map("is_published")
  isApproved             Boolean            @default(false) @map("is_approved")
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @default(now()) @map("updated_at")
  deletedAt              DateTime?          @map("deleted_at")
  createdBy              Int?               @map("created_by")
  updatedBy              Int?               @map("updated_by")
  deletedBy              Int?               @map("deleted_by")
  descriptionCompany     String?
  modelOfWork            String?
  send_to_all_groups     Boolean            @default(false)
  send_to_selected_group Boolean            @default(false)
  salary                 String[]
  city                   String?
  state                  String?
  isActive               Boolean            @default(true)
  extra                  String?
  avatar                 String?
  banner                 String?
  experience             String?
  areas                  AreasOnJobs[]
  categories             CategoriesOnJobs[]
  tags                   TagsOnJobs[]
  createdById            User?              @relation("CreatedJob", fields: [createdBy], references: [id])
  deletedById            User?              @relation("DeletedJob", fields: [deletedBy], references: [id])
  updatedById            User?              @relation("UpdatedJob", fields: [updatedBy], references: [id])

  @@map("jobs")
}

model Token {
  email     String
  phone     String
  token     String   @unique
  toLogin   Boolean  @default(false)
  id        Int      @id @default(autoincrement())
  uuid      String   @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  page      String?

  @@map("token")
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("reset_password_tokens")
}

model Manage_sessions {
  id         Int       @id @default(autoincrement())
  session_id String
  key        String
  value      String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("manage_sessions")
}

model Recruiter {
  id           Int                     @id @default(autoincrement())
  uuid         String                  @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @default(now()) @map("updated_at")
  deletedAt    DateTime?               @map("deleted_at")
  userId       Int                     @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnRecruiter[]
  categories   CategoriesOnRecruiter[]
  tags         TagsOnRecruiter[]
  user         User                    @relation(fields: [userId], references: [id])

  @@map("recruiters")
}

model ServiceProvider {
  id           Int                           @id @default(autoincrement())
  uuid         String                        @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                      @default(now()) @map("created_at")
  updatedAt    DateTime                      @default(now()) @map("updated_at")
  deletedAt    DateTime?                     @map("deleted_at")
  userId       Int                           @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnServiceProvider[]
  categories   CategoriesOnServiceProvider[]
  tags         TagsOnServiceProvider[]
  user         User                          @relation(fields: [userId], references: [id])

  @@map("serviceproviders")
}

model Freelancer {
  id           Int                      @id @default(autoincrement())
  uuid         String                   @default(cuid())
  description  String?
  link         String?
  salary       String[]
  contractMode String[]
  actualRole   String?
  city         String?
  state        String?
  workMode     String[]
  seniority    String[]
  travel       String[]
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @default(now()) @map("updated_at")
  deletedAt    DateTime?                @map("deleted_at")
  userId       Int                      @unique
  extra        String?
  avatar       String?
  banner       String?
  areas        AreasOnFreelancer[]
  categories   CategoriesOnFreelancer[]
  tags         TagsOnFreelancer[]
  user         User                     @relation(fields: [userId], references: [id])

  @@map("freelancers")
}

model subscription {
  id                                  Int       @id @default(autoincrement())
  uuid                                String
  type                                String
  stripe_id                           String
  created_at                          DateTime  @default(now())
  updated_at                          DateTime  @default(now())
  deleted_at                          DateTime?
  createdBy                           Int?
  updatedBy                           Int?
  deletedBy                           Int?
  user_stripe_id                      String
  priceId                             String
  users_subscription_createdByTousers User?     @relation("subscription_createdByTousers", fields: [createdBy], references: [id])
  users_subscription_deletedByTousers User?     @relation("subscription_deletedByTousers", fields: [deletedBy], references: [id])
  users_subscription_updatedByTousers User?     @relation("subscription_updatedByTousers", fields: [updatedBy], references: [id])
}

enum ProfileType {
  CANDIDATE
  RECRUITER
  JOB
  SERVICE_PROVIDER
  FREELANCER
}
